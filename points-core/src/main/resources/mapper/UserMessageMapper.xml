<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tianbao.points.core.dao.IUserMessageDao" >

  <!-- 用户留言关联表实体对象的持久化 -->
  <sql id="c_user_message">
     _user_message.id, _user_message.message_id messageId, _user_message.sender_id senderId,
     _user_message.receiver_id receiverId, _user_message.status,
     _user_message.create_time createTime, _user_message.create_user_id createUserId,
     _user_message.update_time updateTime, _user_message.update_user_id updateUserId
  </sql>
  <sql id="t_user_message">user_message</sql>

  <select id="selectByPrimaryKey" resultType="userMessage" parameterType="java.lang.Long" >
    select <include refid="c_user_message"/>
    from <include refid="t_user_message"/> _user_message
    where id = #{id,jdbcType=BIGINT}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from <include refid="t_user_message"/>
    where id = #{id,jdbcType=BIGINT}
  </delete>

  <insert id="insert" parameterType="userMessage" >
    insert into <include refid="t_user_message"/>
    (id, message_id, sender_id, receiver_id, status, create_time, create_user_id, update_time, update_user_id)
    values (#{id}, #{messageId}, #{senderId}, #{receiverId}, #{status}, #{createTime},
    #{createUserId}, #{updateTime}, #{updateUserId})
  </insert>

  <insert id="insertSelective" parameterType="userMessage" >
    insert into <include refid="t_user_message"/>
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="messageId != null" >
        message_id,
      </if>
      <if test="senderId != null" >
        sender_id,
      </if>
      <if test="receiverId != null" >
        receiver_id,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createUserId != null" >
        create_user_id,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="updateUserId != null" >
        update_user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id},
      </if>
      <if test="messageId != null" >
        #{messageId},
      </if>
      <if test="senderId != null" >
        #{senderId},
      </if>
      <if test="receiverId != null" >
        #{receiverId},
      </if>
      <if test="status != null" >
        #{status},
      </if>
      <if test="createTime != null" >
        #{createTime},
      </if>
      <if test="createUserId != null" >
        #{createUserId},
      </if>
      <if test="updateTime != null" >
        #{updateTime},
      </if>
      <if test="updateUserId != null" >
        #{updateUserId},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="userMessage" >
    update <include refid="t_user_message"/>
    <set >
      <if test="messageId != null" >
        message_id = #{messageId},
      </if>
      <if test="senderId != null" >
        sender_id = #{senderId},
      </if>
      <if test="receiverId != null" >
        receiver_id = #{receiverId},
      </if>
      <if test="status != null" >
        status = #{status},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime},
      </if>
      <if test="createUserId != null" >
        create_user_id = #{createUserId},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime},
      </if>
      <if test="updateUserId != null" >
        update_user_id = #{updateUserId},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateByPrimaryKey" parameterType="userMessage" >
    update <include refid="t_user_message"/>
    set message_id = #{messageId},
      sender_id = #{senderId},
      receiver_id = #{receiverId},
      status = #{status},
      create_time = #{createTime},
      create_user_id = #{createUserId},
      update_time = #{updateTime},
      update_user_id = #{updateUserId}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <!--查询用户留言关联表信息-->
  <select id="selectListByIds" resultType="userMessage">
    select <include refid="c_user_message"/>
    from <include refid="t_user_message"/> _user_message
    where _user_message.status != 1 and _user_message.receiver_id = #{currentId}
    <!--这个暂时不用-->
    <if test="0 != 0">
      or _user_message.sender_id = #{currentId}
    </if>
    and _user_message.message_id in
    <foreach item="id" index="index" collection="ids" open="(" separator="," close=")">
      #{id}
    </foreach>
  </select>

  <!--按条件查询用户留言关联表信息-->
  <select id="selectListByCondition" resultType="userMessage">
    select distinct <include refid="c_user_message"/>
    from <include refid="t_user_message"/> _user_message
    left join <include refid="com.tianbao.points.core.dao.IUserDao.t_user"/> _user
    on _user.id = _user_message.sender_id and _user.status = 0
    where 1 = 1 and _user_message.receiver_id = #{currentId}
    <!--这个暂时不用-->
    <if test="0 != 0">
      or _user_message.sender_id = #{currentId}
    </if>
    <!--未处理状态-->
    <if test="type == 0">and _user_message.status != 1</if>
    <if test="type == 1">and _user_message.status = 5</if>
    <if test="type == 2">and _user_message.status = 6</if>
    <if test="keyword != null">and _user.account like concat('%', '${keyword}','%')</if>
    <if test="id != null">_user_message.sender_id = #{id}</if>
    order by _user_message.create_time desc
  </select>

  <!--查询特定用户已处理的留言关联表信息-->
  <select id="selectById" resultType="userMessage">
    select <include refid="c_user_message"/>
    from <include refid="t_user_message"/> _user_message
    where _user_message.status != 1
    and _user_message.message_id = #{id}
    and _user_message.receiver_id = #{currentId}
  </select>

  <!--批量更新实体-->
  <update id="updateBatch">
    <foreach item="userMessage" index="index" collection="userMessageList" separator=";">
      update <include refid="t_user_message"/>
      set message_id = #{userMessage.messageId},
      sender_id = #{userMessage.senderId},
      receiver_id = #{userMessage.receiverId},
      status = #{userMessage.status},
      create_time = #{userMessage.createTime},
      create_user_id = #{userMessage.createUserId},
      update_time = #{userMessage.updateTime},
      update_user_id = #{userMessage.updateUserId}
      where id = #{userMessage.id}
    </foreach>
  </update>

  <select id="insertBatch">
    <foreach item="userMessage" index="index" collection="userMessageList" separator=";">
      insert into <include refid="t_user_message"/>
      (id, message_id, sender_id, receiver_id, status, create_time, create_user_id, update_time, update_user_id)
      values (#{userMessage.id}, #{userMessage.messageId}, #{userMessage.senderId},
      #{userMessage.receiverId}, #{userMessage.status}, #{userMessage.createTime},
      #{userMessage.createUserId}, #{userMessage.updateTime}, #{userMessage.updateUserId})
    </foreach>
  </select>

  <select id="getListPage" resultType="userMessage">
    select distinct <include refid="c_user_message"/>
    from <include refid="t_user_message"/> _user_message
    where _user_message.status != 1
    and _user_message.sender_id = #{currentId}
    <!--这个暂时不用-->
    <if test="0 != 0">
      or _user_message.sender_id = #{currentId}
    </if>
    order by _user_message.create_time desc
  </select>
</mapper>
