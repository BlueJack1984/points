<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tianbao.points.core.dao.IPersonalBonusDao" >

  <!-- 个人积分增值实体对象的持久化 -->
  <sql id="c_personal_bonus">
      _personal_bonus.id, _personal_bonus.user_id userId, _personal_bonus.system_bonus_id systemBonusId,
      _personal_bonus.ratio, _personal_bonus.visible, _personal_bonus.status,
      _personal_bonus.create_time createTime, _personal_bonus.create_user_id createUserId,
      _personal_bonus.update_time updateTime, _personal_bonus.update_user_id updateUserId,
      _personal_bonus.start_points startPoints, _personal_bonus.end_points endPoints,
      _personal_bonus.parent_id parentId
  </sql>
  <sql id="t_personal_bonus">personal_bonus</sql>

  <select id="selectByPrimaryKey" resultType="personalBonus" parameterType="java.lang.Long" >
    select <include refid="c_personal_bonus"/>
    from <include refid="t_personal_bonus"/> _personal_bonus
    where id = #{id,jdbcType=BIGINT}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from <include refid="t_personal_bonus"/>
    where id = #{id,jdbcType=BIGINT}
  </delete>

  <insert id="insert" parameterType="personalBonus" >
    insert into <include refid="t_personal_bonus"/>
    (id, user_id, system_bonus_id, start_points, ratio, visible, status, create_time, create_user_id,
      update_time, update_user_id, end_points, parent_id)
    values (#{id}, #{userId}, #{systemBonusId}, #{startPoints}, #{ratio}, #{visible},
      #{status}, #{createTime}, #{createUserId}, #{updateTime}, #{updateUserId}, #{endPoints}, #{parentId})
  </insert>

  <insert id="insertSelective" parameterType="personalBonus" >
    insert into <include refid="t_personal_bonus"/>
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="systemBonusId != null" >
        system_bonus_id,
      </if>
      <if test="startPoints != null" >
        start_points,
      </if>
      <if test="endPoints != null" >
        end_points,
      </if>
      <if test="parentId != null" >
        parent_id,
      </if>
      <if test="ratio != null" >
        ratio,
      </if>
      <if test="visible != null" >
        visible,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createUserId != null" >
        create_user_id,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="updateUserId != null" >
        update_user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id},
      </if>
      <if test="userId != null" >
        #{userId},
      </if>
      <if test="systemBonusId != null" >
        #{systemBonusId},
      </if>
      <if test="startPoints != null" >
        #{startPoints},
      </if>
      <if test="endPoints != null" >
        #{endPoints},
      </if>
      <if test="parentId != null" >
        #{parentId},
      </if>
      <if test="ratio != null" >
        #{ratio},
      </if>
      <if test="visible != null" >
        #{visible},
      </if>
      <if test="status != null" >
        #{status},
      </if>
      <if test="createTime != null" >
        #{createTime},
      </if>
      <if test="createUserId != null" >
        #{createUserId},
      </if>
      <if test="updateTime != null" >
        #{updateTime},
      </if>
      <if test="updateUserId != null" >
        #{updateUserId},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="personalBonus" >
    update <include refid="t_personal_bonus"/>
    <set >
      <if test="userId != null" >
        user_id = #{userId},
      </if>
      <if test="systemBonusId != null" >
        system_bonus_id = #{systemBonusId},
      </if>
      <if test="startPoints != null" >
        start_points = #{startPoints},
      </if>
      <if test="endPoints != null" >
        end_points = #{endPoints},
      </if>
      <if test="parentId != null" >
        parent_id = #{parentId},
      </if>
      <if test="ratio != null" >
        ratio = #{ratio},
      </if>
      <if test="visible != null" >
        visible = #{visible},
      </if>
      <if test="status != null" >
        status = #{status},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime},
      </if>
      <if test="createUserId != null" >
        create_user_id = #{createUserId},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime},
      </if>
      <if test="updateUserId != null" >
        update_user_id = #{updateUserId},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateByPrimaryKey" parameterType="personalBonus" >
    update <include refid="t_personal_bonus"/>
    set user_id = #{userId},
      system_bonus_id = #{systemBonusId},
      start_points = #{startPoints},
      end_points = #{endPoints},
      parent_id = #{parentId},
      ratio = #{ratio},
      visible = #{visible},
      status = #{status},
      create_time = #{createTime},
      create_user_id = #{createUserId},
      update_time = #{updateTime},
      update_user_id = #{updateUserId}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <!--根据系统积分增值id查询个人积分指数信息列表，分页-->
  <select id="selectListBySysBonusIdPage" resultType="personalBonus">
    select <include refid="c_personal_bonus"/>
    from <include refid="t_personal_bonus"/> _personal_bonus
    where _personal_bonus.status = 0
    and _personal_bonus.system_bonus_id = #{sysBonusId}
    order by _personal_bonus.create_time desc
  </select>

  <!--批量更新个人积分增值数据-->
  <update id="updateBatch" >
    <foreach collection="personalBonusList" index="index" item="item" separator=";">
      update <include refid="t_personal_bonus"/> _personal_bonus
      set user_id = #{item.userId},
      system_bonus_id = #{item.systemBonusId},
      start_points = #{item.startPoints},
      end_points = #{item.endPoints},
      parent_id = #{item.parentId},
      ratio = #{item.ratio},
      visible = #{item.visible},
      status = #{item.status},
      create_time = #{item.createTime},
      create_user_id = #{item.createUserId},
      update_time = #{item.updateTime},
      update_user_id = #{item.updateUserId}
      where _personal_bonus.id = #{item.id,jdbcType=BIGINT}
    </foreach>
  </update>

  <!--根据用户id集合批量查询个人积分列表-->
  <select id="getListByUserIds" resultType="personalBonus">
    <foreach collection="userIds" index="index" item="id" separator="union">
      (select <include refid="c_personal_bonus"/>
      from <include refid="t_personal_bonus"/> _personal_bonus
      where _personal_bonus.status = 0
      and _personal_bonus.user_id = #{id,jdbcType=BIGINT}
      order by _personal_bonus.create_time desc
      limit 0,1)
    </foreach>
  </select>

  <!--批量插入个人积分增值数据-->
  <insert id="insertBatch" >
    <foreach item="item" index="index" collection="personalBonusList" separator=";">
      insert into <include refid="t_personal_bonus"/>
      (id, user_id, system_bonus_id, start_points, ratio, visible, status, create_time, create_user_id,
      update_time, update_user_id, end_points, parent_id)
      values (#{item.id}, #{item.userId}, #{item.systemBonusId}, #{item.startPoints}, #{item.ratio}, #{item.visible},
      #{item.status}, #{item.createTime}, #{item.createUserId}, #{item.updateTime}, #{item.updateUserId},
      #{item.endPoints}, #{item.parentId})
    </foreach>
  </insert>

  <!--个人积分列表中查询特定会员积分数据,模糊查询，分页展示-->
  <select id="getByCondition" resultType="personalBonus">
    select <include refid="c_personal_bonus"/>
    from <include refid="t_personal_bonus"/> _personal_bonus
    left join `user` as usr on usr.id = _personal_bonus.user_id and usr.status = 0
    where _personal_bonus.status = 0
    and _personal_bonus.system_bonus_id = #{sysBonusId}
    and usr.account like concat('%', '${keyword}','%')
    order by _personal_bonus.create_time desc
  </select>

  <!--根据会员id获取个人积分列表数据-->
  <select id="getPersonalListByUserId" resultType="personalBonus">
    select <include refid="c_personal_bonus"/>
    from <include refid="t_personal_bonus"/> _personal_bonus
    where _personal_bonus.status = 0 and _personal_bonus.user_id = #{userId}
    order by _personal_bonus.create_time desc
  </select>

  <!--根据会员id获取个人积分最新的一条数据-->
  <select id="getLatestByUserId" resultType="personalBonus">
    select <include refid="c_personal_bonus"/>
    from <include refid="t_personal_bonus"/> _personal_bonus
    where _personal_bonus.status = 0 and _personal_bonus.user_id = #{userId}
    order by _personal_bonus.create_time desc
    limit 0,1
  </select>
</mapper>
